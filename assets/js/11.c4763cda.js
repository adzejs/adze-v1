(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{288:function(t,e,a){t.exports=a.p+"assets/img/adze.da3e17bf.png"},289:function(t,e,a){t.exports=a.p+"assets/img/demo.ce24f23e.png"},290:function(t,e,a){t.exports=a.p+"assets/img/api_example_output.4c36dd1d.png"},408:function(t,e,a){"use strict";a.r(e);var s=a(14),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"introduction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),e("h2",{attrs:{id:"why-is-this-named-adze"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-is-this-named-adze"}},[t._v("#")]),t._v(" Why is this named Adze?")]),t._v(" "),e("p",[e("img",{attrs:{src:a(288),alt:"A drawing of a man using an adze to shape a log"}})]),t._v(" "),e("p",[e("em",[t._v("Photo from "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Adze",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("Adze - "),e("a",{attrs:{href:"https://www.merriam-webster.com/dictionary/adze",target:"_blank",rel:"noopener noreferrer"}},[t._v("a cutting tool that ... is used chiefly for shaping wood"),e("OutboundLink")],1),t._v(".")])]),t._v(" "),e("p",[t._v("Adze was chosen as a name for this library to maintain solidarity with the logging puns and to emphasize that this library is a tool for shaping the logs of your application.")]),t._v(" "),e("h2",{attrs:{id:"adze-demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adze-demo"}},[t._v("#")]),t._v(" Adze Demo")]),t._v(" "),e("div",{staticClass:"youtube-video-container"},[e("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/8Ht3LKowKR0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}})]),t._v(" "),e("h2",{attrs:{id:"why-should-i-use-adze"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-should-i-use-adze"}},[t._v("#")]),t._v(" Why should I use Adze?")]),t._v(" "),e("p",[t._v("As you may already be aware there are a number of other good JS libraries out there to assist with logging. The focus of Adze is to provide a convenient and clean API, provide first-class TypeScript support, and to empower you to take command of your logs rather than pigeon-hole you into a specific way of handling them.")]),t._v(" "),e("p",[t._v("Here is a list of the features that Adze provides:")]),t._v(" "),e("ul",[e("li",[t._v("First-class TypeScript support")]),t._v(" "),e("li",[t._v("Multi-environment support for the Browser and Node")]),t._v(" "),e("li",[t._v("Wraps and extends the entire standard API")]),t._v(" "),e("li",[t._v("A fluent, chainable API")]),t._v(" "),e("li",[t._v("Log Listeners for capturing log data")]),t._v(" "),e("li",[t._v("Log annotation namespaces, labels, and other meta data")]),t._v(" "),e("li",[t._v("Attractive styling (EMOJI'S INCLUDED and consistent across major browsers)")]),t._v(" "),e("li",[t._v("Everything is configurable")]),t._v(" "),e("li",[t._v("Enables completely custom log levels")]),t._v(" "),e("li",[t._v("A global log store for recalling logs and overriding configuration (supports micro-frontends and modules)")]),t._v(" "),e("li",[t._v("Support for Mapped Diagnostic Context")]),t._v(" "),e("li",[t._v("Convenient unit testing environment controls")]),t._v(" "),e("li",[t._v("Advanced Log Filtering")]),t._v(" "),e("li",[t._v("and much more...")])]),t._v(" "),e("p",[t._v("Beyond the new features that Adze provides you, it also wraps the entire console web standard.\nRead more about the standard here: "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN Console Docs"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"here-is-a-simple-preview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#here-is-a-simple-preview"}},[t._v("#")]),t._v(" Here is a simple preview")]),t._v(" "),e("p",[e("img",{attrs:{src:a(289),alt:"Preview of Adze logs"}})]),t._v(" "),e("blockquote",[e("p",[t._v("This preview was generated from the same code executed in both the browser (left) and the node (right) environments.")])]),t._v(" "),e("h2",{attrs:{id:"what-does-the-api-look-like"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-does-the-api-look-like"}},[t._v("#")]),t._v(" What does the API look like?")]),t._v(" "),e("p",[t._v("As stated above, Adze offers an easy to use, chainable API. To create a log you simply chain together an Adze log instance with a series of modifiers and then end with a terminator. Here's an example of creating a log with emoji's and a namespace:")]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" adze"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createShed "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'adze'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create our global log in-memory cache")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shed "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Listen to logs that are generated and operate on them")]),t._v("\nshed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" render"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" printed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if my log printed to the console")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("printed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do stuff with my log data like sending to an API or localStorage")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("adze")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useEmoji"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ns")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tix-456'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Example log'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The output of this would look like the following:")]),t._v(" "),e("p",[e("img",{attrs:{src:a(290),alt:"Preview of Adze logs"}})])])}),[],!1,null,null,null);e.default=n.exports}}]);